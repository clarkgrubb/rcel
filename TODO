- fortran support
- go support
- pascal support
- ada support
- generate a Makefile, Antfile, NAntfile

- unit tests: LANGS: C++, ObjC, Java, C Sharp; COMMANDS: class, header, rm-lib
- add #function, #method, #member (synonyms for #class - an remove #class?)
- identify header section and class section keywords: class (can java, C#, C++ class be inside a function?)  (prompt for nested or top level?)
- fill out library template for ObjC
- ability to specify libraries to link from rcel prompt 
- ability to specify library search path (class path) #classpath #libpath/#librarypath/#library_path (or #set LIBRARY_PATH=  #set CLASSPATH=)
- check if needed executables (gcc, java(c), mono, (g)mcs exist...)
- remove backticks: which: 53; compile_executable: 325; compile_library: 349; run_exectuable: 360
- test on windows, ruby 1.8
- prefix all msgs from rcel w/ "RECL: "
- if #delete or output mismatch, give a "RECL: displaying output from entire command history" msg
- make work well with vim (either open with split pane (better)) or call sequentially, or figure out how to iterate thru files

- instead of session.libraries << some_file, how about session.add_library(some_file) and session.rm_library(some_file), so that logic of full pathname can be shared
- if using to create a library, should also be able to create the unit test for the library

- (done) put projects in ~/Lang/<lang>
- (done) ability to create libraries (pops into an editor) (finish this)
- (done) write a parser for comments, string literals, and character literals.  Make
  the end of line detector use this parser
- (done) commands: #lib
- (done) commands: #help
- (done) automatically put each line in one of three places: (1) outside of any class
  and main definition, (2) outside main definition but inside class definition, and
  (3) inside main definition.  #include, #import, import, using go in (1).  Java enum
  declaration goes in (2).  Everything else goes in (3)
- (done) fix that ^D causes exception when editing
- (done) unit tests
- (done) if repl restart on project, find existing libraries
- (done) p() as abbrev for puts(), System.out.println(), System.Console.WriteLine(),
- (done) pf() as abbrev for printf(), PrintStream.printf(), ... 
- (done) implement pf for java and c#, it it is possible...
- (done) catch library compilation errors
- (done) don't include headers/use libraries multiple times
- (done) don't require directory to be specified at startup: use a default value
- (done) ability to display and edit lines
- (done) if all lines deleted, flush output
- (done) ability to define a function or method and have it go to the class line position;
  can code recognize a func/meth definition, or do we need to use a command for this?
- (done) get #class to work in C
- (done) write unit tests for crepl.rb that edit libraries
- (done) implement #rm-library
- (done) templates for main.c, main.cpp,  etc in separate files
- (done) p,pf -> puts,printf
- (done) remove match functions
- (done) rename lines and new_lines to sess and new_sess
- (done) if #delete is used to remove an #include line, does it work?: yes
- (done) library conveniences: In C/C++/ObjC, add #include of header in source, guard macros
- (done) implement import,package (java) and using (c++)
- (done) identify header section and class section keywords: import, using
- (done) package for java: if #lib path/to/file or path.to.file, subdirs created and package declaration inserted
- (done) what happens when running #include with java and C#? (error msg should happen)
- (done) prompt for editor if EDITOR env variable not set and set the env variable accordingly
